"use client";

import * as React from "react";
import { useForm, SubmitHandler, useWatch } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

import { Input } from "@/components/ui/input";
import { Label } from "../ui/label";
import { useCuratorController } from "../entity/controllers/curator.controller";
import Spinner from "../ui/Spinner";

type FormValues = {
  first_name: string;
  last_name: string;
  patronymic: string;
  login: string;
  password: string;
};

export function AddNewCurator() {
  const [isOpen, setIsOpen] = React.useState(false);

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    control,
    formState: { errors, isValid },
  } = useForm<FormValues>({ mode: "onChange" });

  const { createCurator, isCreatingCurator } = useCuratorController();

  const firstName = useWatch({ control, name: "first_name" });
  const lastName = useWatch({ control, name: "last_name" });
  const patronymic = useWatch({ control, name: "patronymic" });

  // üî§ –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
  const transliterate = (text: string): string => {
    const map: Record<string, string> = {
      –∞: "a",
      –±: "b",
      –≤: "v",
      –≥: "g",
      –¥: "d",
      –µ: "e",
      —ë: "e",
      –∂: "zh",
      –∑: "z",
      –∏: "i",
      –π: "y",
      –∫: "k",
      –ª: "l",
      –º: "m",
      –Ω: "n",
      –æ: "o",
      –ø: "p",
      —Ä: "r",
      —Å: "s",
      —Ç: "t",
      —É: "u",
      —Ñ: "f",
      —Ö: "h",
      —Ü: "ts",
      —á: "ch",
      —à: "sh",
      —â: "sch",
      —ä: "",
      —ã: "y",
      —å: "",
      —ç: "e",
      —é: "yu",
      —è: "ya",
    };

    return text
      .split("")
      .map((char) => {
        const lower = char.toLowerCase();
        const isUpper = char === char.toUpperCase();
        const translit = map[lower] || lower;
        return isUpper
          ? translit.charAt(0).toUpperCase() + translit.slice(1)
          : translit;
      })
      .join("");
  };

  // ‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –§–ò–û
  React.useEffect(() => {
    if (firstName && lastName && patronymic) {
      const trLastName = transliterate(lastName);
      const trFirstName = transliterate(firstName);
      const trPatronymic = transliterate(patronymic);

      const login =
        trLastName.charAt(0).toUpperCase() +
        trLastName.slice(1).toLowerCase() +
        trFirstName.charAt(0).toUpperCase() +
        trPatronymic.charAt(0).toUpperCase();
      setValue("login", login, { shouldValidate: true });

      const shuffled =
        trFirstName.charAt(0).toLowerCase() +
        trPatronymic.charAt(0).toUpperCase() +
        trLastName.slice(0, 3).toLowerCase();

      const randomDigits = Math.floor(100 + Math.random() * 900);
      const password = `${shuffled}@${randomDigits}`;

      setValue("password", password, { shouldValidate: true });
    }
  }, [firstName, lastName, patronymic, setValue]);

  const onSubmit: SubmitHandler<FormValues> = async (data: FormValues) => {
    await createCurator(data);
    reset();
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</DialogTitle>
          <DialogDescription>
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div className="grid gap-2">
            <Label htmlFor="last_name">–§–∞–º–∏–ª–∏—è</Label>
            <Input
              id="last_name"
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
              {...register("last_name", {
                required: "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
              })}
            />
            {errors.last_name && (
              <p className="text-red-500 text-sm">{errors.last_name.message}</p>
            )}
          </div>

          <div className="grid gap-2">
            <Label htmlFor="first_name">–ò–º—è</Label>
            <Input
              id="first_name"
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
              {...register("first_name", {
                required: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
              })}
            />
            {errors.first_name && (
              <p className="text-red-500 text-sm">
                {errors.first_name.message}
              </p>
            )}
          </div>

          <div className="grid gap-2">
            <Label htmlFor="patronymic">–û—Ç—á–µ—Å—Ç–≤–æ</Label>
            <Input
              id="patronymic"
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ"
              {...register("patronymic", {
                required: "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
              })}
            />
            {errors.patronymic && (
              <p className="text-red-500 text-sm">
                {errors.patronymic.message}
              </p>
            )}
          </div>

          <div className="grid gap-2">
            <Label htmlFor="login">–õ–æ–≥–∏–Ω</Label>
            <Input
              id="login"
              type="text"
              placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω"
              {...register("login", {
                required: "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
              })}
            />
            {errors.login && (
              <p className="text-red-500 text-sm">{errors.login.message}</p>
            )}
          </div>

          <div className="grid gap-2">
            <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
            <Input
              id="password"
              type="text"
              placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"
              {...register("password", {
                required: "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
              })}
            />
            {errors.password && (
              <p className="text-red-500 text-sm">{errors.password.message}</p>
            )}
          </div>

          <Button
            type="submit"
            className="w-full"
            disabled={!isValid || isCreatingCurator}
          >
            {isCreatingCurator ? <Spinner /> : "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}
